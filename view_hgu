COND_FW = 
var DataHoje = TODAY()
var DataInicioHomolog = MAX('Principal'[INICIO_HOMOLOG])
var AtrasoFW = MAX(Principal[ATRASO_FW])
var DataTerminoHomolog = MAX('Principal'[TERMINO_HOMOLOG])
var DataFW = MAX('Principal'[CHEGADA_FW])
var NovoFW = MAX('Principal'[NOVO_FW])

var RESULTADO = 
    SWITCH(TRUE(),

    ISBLANK(NovoFW), "TBD",
    AtrasoFW = 1 && ISBLANK(DataFW), "ASAP" & "  " & "ðŸŸ¡" & "  " & NovoFW, //a chegada do FW estÃ¡ atrasada
    ISBLANK(DataFW), "-", //NÃ£o chegou o FW ainda, por isso nÃ£o foi preenchido

        DataFW <= DataHoje && DataFW <> BLANK() && (AtrasoFW <> 1), UPPER(FORMAT(DataFW, "DDMMM")) & "  " & "ðŸŸ¢" & "  " & NovoFW, //JÃ¡ estamos com o FW
        DataFW > DataHoje, UPPER(FORMAT(DataFW, "DDMMM")) & "  " & "âšª" & "  " & NovoFW, //Data futura
        AtrasoFW = 1, UPPER(FORMAT(DataFW, "DDMMM")) & "  " & "ðŸŸ¡" & "  " & NovoFW //a chegada do FW estÃ¡ atrasada
    )
    return RESULTADO
    
--------------------------------------------------------------------------------------------------------------

COND_IH = 
var DataHoje = TODAY()
var AtrasoHomolog = MAX(Principal[ATRASO_HOMOLOG])
var DataInicioHomolog = MAX('Principal'[INICIO_HOMOLOG])
var DataTerminoHomolog = MAX('Principal'[TERMINO_HOMOLOG])
var AprovadoHomolog = MAX('Principal'[APROVADO_HOMOLOG])
var ValidacaoEx = MAX(Principal[VALIDACAO_EXECUTIVA_PILOTOS])
var COND_FW = [COND_FW]

var RESULTADO = 
    SWITCH(TRUE(),
    AtrasoHomolog = 2,UPPER(FORMAT(DataInicioHomolog, "DDMMM")) & "  " & "ðŸŸ¡", // estÃ¡ em atraso
    COND_FW = "ðŸŸ¡", "-", // se o FW nÃ£o chegou ainda, entÃ£o nÃ£o retorna nada
    (AprovadoHomolog = 1 && AprovadoHomolog <> BLANK()) || (ValidacaoEx <> 1 && ValidacaoEx <> BLANK()), UPPER(FORMAT(DataInicioHomolog, "DDMMM")) & "  " & "ðŸ”´", // reprovado
    DataInicioHomolog <= DataHoje && DataHoje < DataTerminoHomolog, UPPER(FORMAT(DataInicioHomolog, "DDMMM")) & "  " & "ðŸ”µ", // homologaÃ§Ã£o estÃ¡ em andamento
    DataTerminoHomolog <= DataHoje && DataTerminoHomolog <> BLANK(), UPPER(FORMAT(DataInicioHomolog, "DDMMM")) & "  " & "ðŸŸ¢", // homologaÃ§Ã£o concluÃ­da
    DataInicioHomolog > DataHoje, UPPER(FORMAT(DataInicioHomolog, "DDMMM")) & "  " & "âšª",  // Ã© uma data futura
    "-" //se nÃ£o for preenchido
    )
    return RESULTADO
    
--------------------------------------------------------------------------------------------------------------

COND_IFUT = 
var DataHoje = TODAY()
var DataInicioFUT = MAX('Principal'[INICIO_FUT])
var DataTerminoFUT = MAX('Principal'[TERMINO_FUT])
var AtrasoFUT = MAX(Principal[ATRASO_FUT])
var AprovadoFUT = MAX(Principal[APROVADO_FUT])
var AprovadoHomolog = MAX(Principal[APROVADO_HOMOLOG])

var RESULTADO = 
    SWITCH(TRUE(),
    AprovadoHomolog = 1, "-",

    AtrasoFUT = 2, UPPER(FORMAT(DataInicioFUT, "DDMMM")) & "  " & "ðŸŸ¡", //estÃ¡ em atraso
    AprovadoFUT = 1 && AprovadoFUT <> BLANK(), UPPER(FORMAT(DataInicioFUT, "DDMMM")) & "  " & "ðŸ”´", //estÃ¡ reprovado
    DataInicioFUT <= DataHoje && DataHoje <= DataTerminoFUT, UPPER(FORMAT(DataInicioFUT, "DDMMM")) & "  " & "ðŸ”µ", // homologaÃ§Ã£o estÃ¡ em andamento
    DataTerminoFUT < DataHoje && DataTerminoFUT <> BLANK(), UPPER(FORMAT(DataInicioFUT, "DDMMM")) & "  " & "ðŸŸ¢", // FUT concluÃ­do
    DataInicioFUT > DataHoje, UPPER(FORMAT(DataInicioFUT, "DDMMM")) & "  " & "âšª", // Ã© uma data futura

    ISBLANK(DataInicioFUT), "-" // se termino FUT nÃ£o for preenchido
    )
    return RESULTADO

--------------------------------------------------------------------------------------------------------------

COND_IPFOA = 
var DataHoje = TODAY()
var DataInicioPFOA = MAX('Principal'[INICIO_PREFOA])
var DataTerminoPFOA = MAX('Principal'[TERMINO_PREFOA])
var AtrasoPFOA = MAX(Principal[ATRASO_PREFOA])
var AprovadoPFOA = MAX('Principal'[APROVADO_PREFOA])

var RESULTADO = 
    SWITCH(TRUE(),

    AtrasoPFOA = 1, UPPER(FORMAT(DataInicioPFOA, "DDMMM")) & "  " & "ðŸŸ¡", //estÃ¡ em atraso
    AprovadoPFOA = 0 && AprovadoPFOA <> BLANK(), UPPER(FORMAT(DataInicioPFOA, "DDMMM")) & "  " & "ðŸ”´", //prÃ© foa foi reprovado
    DataInicioPFOA <= DataHoje && DataHoje <= DataTerminoPFOA, UPPER(FORMAT(DataInicioPFOA, "DDMMM")) & "  " & "ðŸ”µ", // homologaÃ§Ã£o estÃ¡ em andamento
    DataTerminoPFOA < DataHoje && DataTerminoPFOA <> BLANK(), UPPER(FORMAT(DataInicioPFOA, "DDMMM")) & "  " & "ðŸŸ¢", // homologaÃ§Ã£o concluÃ­da
    DataInicioPFOA > DataHoje, UPPER(FORMAT(DataInicioPFOA, "DDMMM")) & "  " & "âšª", // Ã© uma data futura

    ISBLANK(DataInicioPFOA), "-" // se inicio PFOA nÃ£o for preenchido
    )
    return RESULTADO
    
--------------------------------------------------------------------------------------------------------------

COND_IFOA = 
var DataHoje = TODAY()
var DataInicioFOA = MAX('Principal'[INICIO_FOA])
var DataTerminoFOA = MAX('Principal'[TERMINO_FOA])
var AtrasoIFOA = MAX('Principal'[ATRASO_FOA])
var AprovadoFOA = MAX('Principal'[APROVADO_FOA])
var AprovadoFUT = [COND_IFUT]
var DataInicioFUT = MAX('Principal'[INICIO_FUT])

var RESULTADO = 
    SWITCH(TRUE(),
    
    AprovadoFUT = "-" || MAX(Principal[APROVADO_FUT]) = 1, "-",

    AtrasoIFOA = 2,  UPPER(FORMAT(DataInicioFOA, "DDMMM")) & "  " & "ðŸŸ¡", //estÃ¡ em atraso
    
    AprovadoFOA = 1 && AprovadoFOA <> BLANK(), UPPER(FORMAT(DataInicioFOA, "DDMMM")) & "  " & "ðŸ”´", //FOA reprovado
    
    DataInicioFOA <= DataHoje && DataHoje <= DataTerminoFOA, UPPER(FORMAT(DataInicioFOA, "DDMMM")) & "  " & "ðŸ”µ", // homologaÃ§Ã£o estÃ¡ em andamento
    
    DataTerminoFOA < DataHoje && DataTerminoFOA <> BLANK(), UPPER(FORMAT(DataInicioFOA, "DDMMM")) & "  " & "ðŸŸ¢", // homologaÃ§Ã£o concluÃ­da
    
    DataInicioFOA > DataHoje, UPPER(FORMAT(DataInicioFOA, "DDMMM")) & "  " & "âšª", // Ã© uma data futura

    ISBLANK(DataInicioFOA), "-" // se inicio FOA nÃ£o for preenchido ou for reprovado

    )
    return RESULTADO

--------------------------------------------------------------------------------------------------------------

COND_CERTIFICADO = 
var DataCertificado = MAX(Principal[CERTIFICADO_HOMOLOG])
var AprovadoCertificado = MAX('Principal'[APROVADO_CERTIFICADO])
var DataHoje = TODAY()
var AprovadoHomolog = [COND_IH]
var AprovadoFUT = [COND_IFUT]
var AprovadoFOA = [COND_IFOA]

var RESULTADO = 
    SWITCH(TRUE(),
    AprovadoFOA = "-" || MAX(Principal[INICIO_FOA]) = 1, "-",

    AprovadoCertificado = 0 && AprovadoCertificado <> BLANK(), UPPER(FORMAT(DataCertificado, "DDMMM")) & "  " & "ðŸ”´", //certificado reprovado
    DataCertificado > DataHoje && DataCertificado <> BLANK(), UPPER(FORMAT(DataCertificado, "DDMMM")) & "  " & "âšª", // Ã© uma data futura
    DataCertificado < DataHoje && DataCertificado <> BLANK(), UPPER(FORMAT(DataCertificado, "DDMMM")) & "  " & "ðŸŸ¢", // certificado aprovado

        ISBLANK(DataCertificado), "-" //se certificado nÃ£o for preenchido
    )
    return RESULTADO

--------------------------------------------------------------------------------------------------------------

COND_PREF = 
var DataHoje = TODAY()
var DataPref = MAX(Principal[PREFERRED])
var DataFabrica = MAX('Principal'[FABRICA])
var AtrasoPREF = MAX(Principal[ATRASO_PREFERRED])
var AprovadoCertificado = [COND_CERTIFICADO]
var DataReversa = MAX(Principal[REVERSA])

var RESULTADO = 
    SWITCH(TRUE(),
    AprovadoCertificado = "-" || MAX(Principal[APROVADO_CERTIFICADO]) = 1, "-",

    AtrasoPREF = 1, UPPER(FORMAT(DataPref, "DDMMM")) & "  " & "ðŸŸ¡", //estÃ¡ em atraso
    DataPref = DataHoje && DataHoje < DataFabrica || (DataFabrica = DataPref && DataPref = DataHoje && DataHoje <= DataPref), UPPER(FORMAT(DataPref, "DDMMM")) & "  " & "ðŸ”µ", // preferred estÃ¡ em andamento
    DataPref < DataHoje && DataPref <> BLANK(), UPPER(FORMAT(DataPref, "DDMMM")) & "  " & "ðŸŸ¢", // preferred concluÃ­da
    DataPref > DataHoje, UPPER(FORMAT(DataPref, "DDMMM")) & "  " & "âšª",
    ISBLANK(DataPref), "-"
    )
    return RESULTADO

--------------------------------------------------------------------------------------------------------------

COND_FABRICA = 
var DataHoje = TODAY()
var DataPref = MAX('Principal'[PREFERRED])
var DataFabrica = MAX('Principal'[FABRICA])
var DataReversa = MAX('Principal'[REVERSA])
var AtrasoFabrica = MAX('Principal'[ATRASO_FABRICA])
var AprovadoCertificado = MAX('Principal'[APROVADO_CERTIFICADO])
var AprovadoPreferred = [COND_PREF]

var RESULTADO = 
    SWITCH(TRUE(),

    AprovadoPreferred = "-", "-",

    AtrasoFabrica = 1, UPPER(FORMAT(DataFabrica, "DDMMM")) & "  " & "ðŸŸ¡", //estÃ¡ em atraso
    DataFabrica = DataHoje && DataHoje < DataReversa || (DataFabrica = DataPref && DataFabrica = DataHoje && DataHoje <= DataReversa), UPPER(FORMAT(DataFabrica, "DDMMM")) & "  " & "ðŸ”µ", // preferred estÃ¡ em andamento
    DataFabrica < DataHoje && DataFabrica <> BLANK(), UPPER(FORMAT(DataFabrica, "DDMMM")) & "  " & "ðŸŸ¢", // jÃ¡ passou pela fÃ¡brica
    ISBLANK(DataFabrica), "-", //se nÃ£o for preeenchido ou o certificado for reprovado
    DataFabrica > DataHoje, UPPER(FORMAT(DataFabrica, "DDMMM")) & "  " & "âšª"
    )
    return RESULTADO

--------------------------------------------------------------------------------------------------------------

COND_REV = 
var DataHoje = TODAY()
var DataReversa = MAX(Principal[REVERSA])
var DataFabrica = MAX('Principal'[FABRICA])
var DataInicioScript = MAX('Principal'[INICIO_SCRIPTS_MASSIFICACAO])
var AtrasoReversa = MAX(Principal[ATRASO_REVERSA])
var AprovadoFabrica = [COND_FABRICA]

var RESULTADO = 
    SWITCH(TRUE(),
    AprovadoFabrica = "-", "-",

    AtrasoReversa = 2, UPPER(FORMAT(DataReversa, "DDMMM")) & "  " & "ðŸŸ¡", //estÃ¡ em atraso
    DataReversa = DataHoje && DataHoje < DATE(YEAR(DataReversa),MONTH(DataReversa),DAY(DataReversa)+10) || (DataFabrica = DataReversa && DataReversa = DataHoje && DataHoje <= DataInicioScript), UPPER(FORMAT(DataReversa, "DDMMM")) & "  " & "ðŸ”µ",// Reversa estÃ¡ em andamento
    DataReversa < DataHoje && DataReversa <> BLANK(), UPPER(FORMAT(DataReversa, "DDMMM")) & "  " & "ðŸŸ¢", // jÃ¡ passou pela reversa
    DataReversa > DataHoje, UPPER(FORMAT(DataReversa, "DDMMM")) & "  " & "âšª", 
    ISBLANK(DataReversa), "-"
    )
    return RESULTADO

--------------------------------------------------------------------------------------------------------------

prioridade = 
var prioridade = MAX(Principal[PRIORIDADE])

var resultado = SWITCH(TRUE(),
    prioridade = 1, prioridade & " " & "ðŸ‘‘",
    prioridade
) return resultado

